pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--global variables
sqrt2=1.414

--camera vars
start_speed=15
end_speed=1
room={x=0,y=0}
cam={x=0,y=0}

--door vars
door_width = 16
door_depth = 2
half_door_width = flr(door_width/2)
half_door_depth = flr(door_depth/2)

--debug vars
draw_debug=true
collision_checks=0
draw_calls=0
player_input=""

--room transitions
transition=nil

--queues
objs={}
populated_rooms={}

--colors
gray=5ltgray=6white=7blue=1
ltblue=12red=8orange=4ltorange=9
yellow=10purple=2pink=14green=3
ltgreen=11lavender=13lav=13beige=15
-->8
--game loop
function _init()
  --initialize object types
  init_entity()
  for _,init in pairs(_inits) do
    init()
  end
  player:init()
  --spawn room
  inst_doors(0,0)
  inst(kinebody,0,0,20,20,10,20)
  add(populated_rooms,copy(room))

  --spawned objects
  inst(staticbody,1,0,20,20,10,20)
  inst(kinebody,0,1,64,64,4,8,ltblue)
end

function _update60()
  --reset debug vars per frame
  collision_checks=0
  draw_calls=0
  player_input=""

  --update camera
  update_camera(cam.x,cam.y,room.x*128,room.y*128)

  --player transition handler
  if transition then
    play_transition()
    local is_colliding=player_colliding()
    if not is_colliding then
      --transition is done
      transition=nil
      player.room=copy(player.next_room)
      player.next_room=nil
    end
  else
    player:update()
  end

  --update game_objs
  local_call("update")
end

function _draw()
  cls()
  camera(cam.x,cam.y)
  --draw game_objs in world space
  local_call("draw")
  player:draw()
  camera()

  --draw map in modulated world space
  camera(cam.x%128, cam.y%128)
  map(0, 0, 0, 0, 16*3,16*3)
  camera()

  --draw debug in screen space
  if draw_debug then
    local _y=2
    print("cl:"..collision_checks,
      2,_y,white) _y+=9
    print("dr:"..draw_calls,
      2,_y,white) _y+=9
    print("tr:"..(transition or "none"),
      2,_y,white) _y+=9
    print("io:"..(player_input or "none"),
      2,_y,white)
  end
end

function play_transition()
  if transition=="left" then
    player:move(-1,0)
  elseif transition=="top" then
    player:move(0,-1)
  elseif transition=="right" then
    player:move(1,0)
  elseif transition=="bot" then
    player:move(0,1)
  end
end
-->8
--game object

--instantiate
function inst(_obj,_room_x,_room_y,_x,_y,_w,_h,_c,_v_x,_v_y,_adj_room)
  local temp = _obj:new()
  if(_room_x)temp.room.x=_room_x
  if(_room_y)temp.room.y=_room_y
  if(_x)temp.pos.x=_x
  if(_y)temp.pos.y=_y
  if(_w)temp.size.w=_w
  if(_h)temp.size.h=_h
  if(_c)temp.c=_c
  if(_v_x)temp.vel.x=_v_x
  if(_v_y)temp.vel.y=_v_y
  temp:init(_adj_room)
  temp.id=#objs+1
  add(objs,temp)
end

function inst_proj(_room_x,_room_y,_x,_y,_v_x,_v_y,_c)
  inst(proj,_room_x,_room_y,_x,_y,nil,nil,_c,_v_x,_v_y,true)
end

--local call
--call a function for all
--game_objs in player's room
function local_call(_func,_room)
  for _,obj in pairs(objs) do
    --check player's current roon
    if tables_equal(obj.room,player.room) then
      obj[_func](obj)
    end
    --check next room
    if player.next_room then
      if tables_equal(obj.room,player.next_room) then
        obj[_func](obj)
      end
    end
  end
end

game_obj={
  id=nil,
  room={x=0,y=0},
  pos={x=64,y=64},
  size={w=4,h=8},
  c=ltgray,
  tag="game_obj",
  x_off=0,

  init=function(self,not_adjust_room)
    self.x_off=flr(self.size.w/2)
    if not not_adjust_room then
      self.pos.x+=self.room.x*128
      self.pos.y+=self.room.y*128
    end
  end,
  
  update=function(self)end,
  
  draw=function(self)
    draw_calls+=1
    self:o_draw()
    self:h_draw()
  end,

  o_draw=function(self)
    rectfill(self.pos.x,self.pos.y,
      self.pos.x+self.size.w,
      self.pos.y+self.size.h,
      self.c)
  end,

  h_draw=function(self)end,

  damage=function(self)end,

  new=function(self)
    return copy(self)
  end,

  destroy=function(self)
    del(objs,self)
  end,

  move=function(self,_x,_y)
    self.pos.x+=_x
    self.pos.y+=_y
  end
}

--must be called before inits
function init_entity()
  entity=game_obj:new()
  entity.health_bar={
    val=100,
    _max=100,
    w=8,h=1,
    c=ltgray,bgc=gray
  }
  function entity:damage(_damage)
    self.health_bar.val=max(0,self.health_bar.val-_damage)
    if self.health_bar.val==0 then
      self:destroy()
    end
  end
  function entity:h_draw()
    local _y=self.pos.y-2
    local _x=self.x_off+self.pos.x-4
    --bg line
    line(_x,_y,
      _x+self.health_bar.w,_y,
      self.health_bar.bgc)
    --health bar
    line(_x,_y,
      _x+self.health_bar.w*(self.health_bar.val/self.health_bar._max),_y,
      self.health_bar.c)
  end
end

--game object type initializers
_inits={
  --init player
  init_player = function()
    player=entity:new()
    player.tag="player"
    player.c=red
    player.next_room=nil
    player.can_control=true
    player.vel={x=0,y=0}
    player.health_bar.c=14

    player.can_cast=true
    player.cast_delay=0
    player._cast_delay=10
    player.proj_speed=2
    function player:cast(v_x,v_y)
      if self.can_cast then
        self.can_cast=false
        self.cast_delay=self._cast_delay
        inst_proj(self.room.x,self.room.y,self.pos.x,self.pos.y,
          .5*self.vel.x+v_x,.5*self.vel.y+v_y)
      end
    end

    function player:update()
      if self.can_control then
        self:action()
        self:movement()
      end

      --cast countdown
      if not self.can_cast then
        self.cast_delay-=1
        if self.cast_delay<=0 then
          self.cast_delay=0
          self.can_cast=true
        end
      end
    end
    --handles player actions
    function player:action()
      --system menu
      if btn(6) then
        player_input="start "
      end

      --left hand controls
      if btn(4,0) then
        player_input="o1 "
      end
      if btn(5,0) then
        player_input="x1 "
      end

      --right hand controls
      if btn(4,1) then
        player_input="o2 "
      end
      if btnp(5,1) then
        player_input="x2 "
        --toggle debug
        draw_debug=not draw_debug
      end

      local aim_vec={x=0,y=0}
      if btn(2,1) then
        player_input=player_input.."u"
        aim_vec.y-=1
      end
      if btn(3,1) then
        player_input=player_input.."d"
        aim_vec.y+=1
      end
      if btn(1,1) then
        player_input=player_input.."r"
        aim_vec.x+=1
      end
      if btn(0,1) then
        player_input=player_input.."l"
        aim_vec.x-=1
      end
      if aim_vec.x!=0 and aim_vec.y!=0 then
      self:cast(self.proj_speed*aim_vec.x/sqrt2,self.proj_speed*aim_vec.y/sqrt2)
      elseif aim_vec.x!=0 or aim_vec.y!=0 then
        self:cast(self.proj_speed*aim_vec.x,self.proj_speed*aim_vec.y)
      end
    end
    --handles player movement
    function player:movement()
      --get player input
      local move_vec={x=0,y=0}
      if btn(1,0) then
        move_vec.x+=1
      end
      if btn(0,0) then
        move_vec.x-=1
      end
      if btn(2,0) then
      move_vec.y-=1
      end
      if btn(3,0) then
        move_vec.y+=1
      end

      --test movement, with
      --x & y as separate cases
      local _can_move_x=true
      local _can_move_y=true
      local new_pos={}
      local predictions={}
      local room_collision=false
      --prevents 2 triggers
      --in 1 frame
      local door_triggered=false
      --x direction
      if move_vec.x!=0 then
        predictions=get_collisions(player,player.pos.x+move_vec.x,player.pos.y)
        room_collision=will_collide_room(player,player.pos.x+move_vec.x,player.pos.y)
        if room_collision==false then
          for _,obj in pairs(predictions) do
            --staticbodies prevent movement
            if obj.tag=="staticbody" then
             _can_move_x = false
            elseif obj.tag=="kinebody" then
            --kinematic body pushing
              if obj:can_move(obj.pos.x+move_vec.x,obj.pos.y) then
                obj:move(move_vec.x,0)
              else
                _can_move_x=false
              end
            elseif obj.tag=="door" then
              if not door_triggered then
                obj:trigger()
                door_triggered=true
              end
              player.next_room=copy(room)
              transition=obj.dir
            end
          end
        else
         _can_move_x=false
        end
      end
      --y direction
      if move_vec.y!=0 then
        predictions=get_collisions(player,player.pos.x,player.pos.y+move_vec.y)
        room_collision=will_collide_room(player,player.pos.x,player.pos.y+move_vec.y)
        if room_collision==false then
          for _,obj in pairs(predictions) do
            --staticbodies prevent movement
            if obj.tag=="staticbody" then
             _can_move_y = false
            elseif obj.tag=="kinebody" then
             --kinematic body pushing
             if obj:can_move(obj.pos.x,obj.pos.y+move_vec.y) then
              obj:move(0,move_vec.y)
             else
              _can_move_y=false
             end
            elseif obj.tag=="door" then
              if not door_triggered then
                obj:trigger()
                door_triggered=true
              end
              player.next_room=copy(room)
              transition=obj.dir
            end
          end
        else
         _can_move_y=false
        end
      end

      --apply movement
      if _can_move_x then
        self.vel.x=move_vec.x
      else
       self.vel.x=0
      end
      if _can_move_y then
        self.vel.y=move_vec.y
      else
       self.vel.y=0
      end
      --cont
      self:move(self.vel.x,self.vel.y)
    end
  end,

  --init staticbody
  init_staticbody = function()
    staticbody=game_obj:new()
    staticbody.tag="staticbody"
    staticbody.c=gray
  end,

  --init kinematic body
  init_kinebody = function()
    kinebody=entity:new()
    kinebody.tag="kinebody"
    kinebody.c=green
    --checks whether the kinematic body will collde
    function kinebody:can_move(_x,_y)
      if will_collide(self,_x,_y)
      or will_collide_room(self,_x,_y) then
        return false
      end
      return true
    end
  end,

  --init door
  init_door = function()
    door=game_obj:new()
    door.tag="door"
    door.c=ltgray
    door.dir=nil

    function door:trigger()
      if self.dir=="left" then
        room.x-=1
      elseif self.dir=="top" then
        room.y-=1
      elseif self.dir=="right" then
        room.x+=1
      elseif self.dir=="bot" then
        room.y+=1
      end
      if not is_in_table(populated_rooms,room) then
        inst_doors(room.x,room.y)
        add(populated_rooms,copy(room))
      end
    end
  end,

  --init projectile
  init_projectile = function()
    proj=game_obj:new()
    proj.tag="projectile"
    proj.c=orange
    proj.size={w=3,h=3}
    proj.vel={x=0,y=0}

    function proj:update()
      self.pos.x+=self.vel.x
      self.pos.y+=self.vel.y

      if will_collide_room(self,self.pos.x,self.pos.y)
      then
        self:destroy()
      end

      local collisions=get_collisions(self,self.pos.x,self.pos.y)
      for _,obj in pairs(collisions) do
        obj:damage(10)
        self:destroy()
      end
    end
  end
}

function inst_door(_dir,_room_x,_room_y)
  local temp = door:new()
  temp.dir=_dir
  temp.room={x=_room_x,y=_room_y}
  --place doors based on direction
  if _dir=="left" then
    temp.pos.x = 0
    temp.pos.y = 64-half_door_width
    temp.size={w=door_depth,h=door_width}
  end
  if _dir=="top" then
    temp.pos.x = 64-half_door_width
    temp.pos.y = 0
    temp.size={w=door_width,h=door_depth}
  end
  if _dir=="right" then
    temp.pos.x = 128-door_depth-1
    temp.pos.y = 64-half_door_width
    temp.size={w=door_depth,h=door_width}
  end
  if _dir=="bot" then
    temp.pos.x = 64-half_door_width
    temp.pos.y = 128-door_depth-1
    temp.size={w=door_width,h=door_depth}
  end
  temp.pos.x+=_room_x*128
  temp.pos.y+=_room_y*128
  add(objs,temp)
end

function inst_doors(_room_x,_room_y)
  inst_door("left",_room_x,_room_y)
  inst_door("top",_room_x,_room_y)
  inst_door("right",_room_x,_room_y)
  inst_door("bot",_room_x,_room_y)
end
-->8
--functions
--collision functions

--base collision func
--for rects
function r_coll(x1,y1,x2,y2,_x1,_y1,_x2,_y2)
  collision_checks+=1
  v_align=true
  h_align=true
  --vertical alignment
  if x2<_x1 or _x2<x1 then
    h_align=false
  end
  --horizontal alignment
  if y2<_y1 or _y2<y1 then
    v_align=false
  end
  --return result
  if h_align==true and v_align==true then
    return true
  else
    return false
  end
end

--collisions with room walls
function will_collide_room(_obj,_x,_y)
  _x%=128
  _y%=128
  if  _x>=1 and _x<=127-_obj.size.w-1
  and _y>=1 and _y<=127-_obj.size.h-1 then
    return false
  else
    return true
  end
end

--object collisions
function player_colliding()
  local colliding = will_collide(player,player.pos.x,player.pos.y)
  if player.next_room then
    colliding = colliding or will_collide(player,player.pos.x,player.pos.y,player.next_room)
  end
  return colliding
end

function will_collide(_obj,_x,_y,_room)
  local colliding=false
  local room=_obj.room
  if(_room)room=_room
  for _,obj in pairs(objs) do
    if tables_equal(room,obj.room) and obj!=_obj then
      colliding=r_coll(
        _x,_y,_x+_obj.size.w,_y+_obj.size.h,
        obj.pos.x,obj.pos.y,obj.pos.x+obj.size.w,obj.pos.y+obj.size.h
      )
    end
    if colliding==true then
      return true
    end
  end
  return false
end

function get_collisions(_obj,_x,_y,_room)
  local collisions={}
  local colliding=false
  local room=_obj.room
  if(_room)room=_room
  for _,obj in pairs(objs) do
    if tables_equal(room,obj.room) and obj!=_obj then
      colliding=r_coll(
        _x,_y,_x+_obj.size.w,_y+_obj.size.h,
        obj.pos.x,obj.pos.y,obj.pos.x+obj.size.w,obj.pos.y+obj.size.h
      )
      if colliding then
        add(collisions,obj)
      end
    end
  end
  return collisions
end

--camera functions
  function update_camera(x,y,tx,ty)
    if (x!=tx) then
      dist_norm = 1-((abs(x-tx))/128)
      speed = flr(lerp(start_speed,end_speed,dist_norm))
      cam.x = step_towards(x,tx,speed)
    end
    if (y!=ty) then
      dist_norm = 1-((abs(y-ty))/128)
      speed = flr(lerp(start_speed,end_speed,dist_norm))
      cam.y = step_towards(y,ty,speed)
    end
  end

--table functions
function copy(o)
  local c
  if type(o) == 'table' then
    c = {}
    for k, v in pairs(o) do
      c[k] = copy(v)
    end
  else
    c = o
  end
  return c
end

function is_in_table(t,_var)
  for _,var in pairs(t) do
    if tables_equal(var,_var) then
      return true
    end
  end
  return false
end

function tables_equal(t1,t2)
  for key,value in pairs(t1) do
    if t2[key]!=value then
      return false
    end
  end
  return true
end

function concatenate_tables(t1,t2)
    for i=1,#t2 do
        t1[#t1+1] = t2[i]
    end
    return t1
end

function printh_t(t)
  for k,e in pairs(t) do
    printh(k..": "..e)
  end
end

--string parsing functions
function strsplit(inputstr, sep)
  if(sep==nil)sep="%s"
  local t={}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    table.insert(t, str)
  end
  return t
end

--math functions
--interpolation
function lerp(a,b,t)
  return a + (b-a)*t
end

function step_towards(a,b,amt)
  if a<b then
    return min(a+amt,b)
  end
  if a>b then
    return max(a-amt,b)
  end
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111111111111111111111111111121011111111111111111111111111111210111111111111111111111111111112100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000000000022020000000000000000000000000000220200000000000000000000000000002200000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03131313131313131313131313131323031313131313131313131313131313230313131313131313131313131313132300000000000000000000000000000000
__map__
1011111111111111111111111111111210111111111111111111111111111112101111111111111111111111111111120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3031313131313131313131313131313230313131313131313131313131313132303131313131313131313131313131320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011111111111111111111111111111210111111111111111111111111111112101111111111111111111111111111120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002220000000000000000000000000000022200000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3031313131313131313131313131313230313131313131313131313131313132303131313131313131313131313131320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
